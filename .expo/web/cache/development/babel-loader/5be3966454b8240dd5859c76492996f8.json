{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"S:\\\\Victor\\\\Documents\\\\Aula 19 - QRCodeModal\\\\src\\\\components\\\\Scanner.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nexport default function Scanner(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    props.onCodeScanned(type, data);\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      width: \"100%\",\n      height: \"90%\",\n      flexDirection: \"column\",\n      justifyContent: \"flex-end\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), scanned && React.createElement(Button, {\n    title: \"Repetir Escaneamento\",\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["S:/Victor/Documents/Aula 19 - QRCodeModal/src/components/Scanner.js"],"names":["React","useState","useEffect","BarCodeScanner","Scanner","props","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","onCodeScanned","width","height","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA,kBACKJ,QAAQ,CAAC,IAAD,CADb;AAAA;AAAA,MAC9BK,aAD8B;AAAA,MACfC,gBADe;;AAAA,mBAEPN,QAAQ,CAAC,KAAD,CAFD;AAAA;AAAA,MAE9BO,OAF8B;AAAA,MAErBC,UAFqB;;AAIrCP,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BC,cAAc,CAACO,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC/CL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,KAAK,CAACU,aAAN,CAAoBF,IAApB,EAA0BC,IAA1B;AAED,GAJD;;AAMA,MAAIR,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AAED,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLU,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,MAAM,EAAE,KAFH;AAGLC,MAAAA,aAAa,EAAE,QAHV;AAILC,MAAAA,cAAc,EAAE;AAJX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAEX,OAAO,GAAGY,SAAH,GAAeR,oBAD1C;AAEE,IAAA,KAAK,EAAES,UAAU,CAACC,kBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAaGd,OAAO,IACN,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE,sBADT;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,CADF;AAsBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Text, View, StyleSheet, Button } from \"react-native\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\n\nexport default function Scanner(props) {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    })();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    props.onCodeScanned(type, data);\n    //alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View\n      style={{\n        width: \"100%\",\n        height: \"90%\",\n        flexDirection: \"column\",\n        justifyContent: \"flex-end\",\n      }}\n    >\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n\n      {scanned && (\n        <Button\n          title={\"Repetir Escaneamento\"}\n          onPress={() => setScanned(false)}\n        />\n      )}\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}